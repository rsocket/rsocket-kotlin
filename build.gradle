/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.gradle.build-scan' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'com.jfrog.artifactory' version '4.9.8' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.3.50' apply false
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply from: '../gradle/dependency-management.gradle'

    dependencies {
        api 'io.netty:netty-buffer'
        api 'io.reactivex.rxjava2:rxjava'
        api 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'
        compileOnly 'com.google.code.findbugs:jsr305'

        testImplementation 'org.slf4j:slf4j-api'
        testImplementation 'junit:junit'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.hamcrest:hamcrest-library'
        testImplementation 'org.slf4j:slf4j-log4j12'
    }

    repositories {
        mavenCentral()
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar, jar
    }
}

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/bintray.gradle'

description = 'RSocket-kotlin: Reactive Streams over network boundary with Kotlin/Rxjava'

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}
