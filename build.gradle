/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.gradle.build-scan'
    id 'com.palantir.git-version'
    id 'io.spring.dependency-management' apply false
    id 'com.jfrog.bintray' apply false
    id 'com.jfrog.artifactory' apply false
    id 'org.jetbrains.kotlin.jvm' apply false
}

def versionSuffix = versionSuffix()

allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }
    project.version += versionSuffix
    println "version: ${project.version}"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'kotlin'

    dependencies {
        api 'io.netty:netty-buffer'
        api 'io.reactivex.rxjava2:rxjava'
        api 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'
        api 'org.slf4j:slf4j-api'

        compileOnly 'com.google.code.findbugs:jsr305'

        testImplementation 'junit:junit'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.hamcrest:hamcrest-library'
        testImplementation 'org.slf4j:slf4j-log4j12'
    }

    repositories {
        mavenCentral()
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar, jar
    }
}

apply from: 'gradle/dependency-management.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/bintray.gradle'

description = 'RSocket-kotlin: Reactive Streams over network boundary with Kotlin/Rxjava'

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

def versionSuffix() {
    def versionSuffix
    def branchName = project.findProperty('branch');
    if (branchName == null) {
        def details = versionDetails()
        if (details != null) {
            branchName = details.branchName
        }
    }
    /*branch*/
    if (branchName != null) {
        if (branchName == 'master') {
            versionSuffix = ''
        } else if (branchName == 'develop') {
            versionSuffix = '-SNAPSHOT'
        } else {
            versionSuffix = "-${branchName.replace("/", "-")}-SNAPSHOT"
        }
    /*tag*/
    } else {
        versionSuffix = ''
    }
    return versionSuffix
}
