// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.rsocket.kotlin:rsocket-transport-ktor-websocket-client>
sealed interface io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport : io.rsocket.kotlin.transport/RSocketTransport { // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport|null[0]
    abstract fun target(io.ktor.http/HttpMethod = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.rsocket.kotlin.transport/RSocketClientTarget // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport.target|target(io.ktor.http.HttpMethod;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
    abstract fun target(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.rsocket.kotlin.transport/RSocketClientTarget // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport.target|target(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
    abstract fun target(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.rsocket.kotlin.transport/RSocketClientTarget // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport.target|target(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]

    final object Factory : io.rsocket.kotlin.transport/RSocketTransportFactory<io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport, io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder> // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport.Factory|null[0]
}

sealed interface io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder : io.rsocket.kotlin.transport/RSocketTransportBuilder<io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransport> { // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder|null[0]
    abstract fun <#A1: io.ktor.client.engine/HttpClientEngineConfig> httpEngine(io.ktor.client.engine/HttpClientEngineFactory<#A1>, kotlin/Function1<#A1, kotlin/Unit> = ...) // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder.httpEngine|httpEngine(io.ktor.client.engine.HttpClientEngineFactory<0:0>;kotlin.Function1<0:0,kotlin.Unit>){0ยง<io.ktor.client.engine.HttpClientEngineConfig>}[0]
    abstract fun httpEngine(io.ktor.client.engine/HttpClientEngine, kotlin/Function1<io.ktor.client.engine/HttpClientEngineConfig, kotlin/Unit> = ...) // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder.httpEngine|httpEngine(io.ktor.client.engine.HttpClientEngine;kotlin.Function1<io.ktor.client.engine.HttpClientEngineConfig,kotlin.Unit>){}[0]
    abstract fun httpEngine(kotlin/Function1<io.ktor.client.engine/HttpClientEngineConfig, kotlin/Unit>) // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder.httpEngine|httpEngine(kotlin.Function1<io.ktor.client.engine.HttpClientEngineConfig,kotlin.Unit>){}[0]
    abstract fun webSocketsConfig(kotlin/Function1<io.ktor.client.plugins.websocket/WebSockets.Config, kotlin/Unit>) // io.rsocket.kotlin.transport.ktor.websocket.client/KtorWebSocketClientTransportBuilder.webSocketsConfig|webSocketsConfig(kotlin.Function1<io.ktor.client.plugins.websocket.WebSockets.Config,kotlin.Unit>){}[0]
}

final fun <#A: io.ktor.client.engine/HttpClientEngineConfig> io.rsocket.kotlin.transport.ktor.websocket.client/WebSocketClientTransport(io.ktor.client.engine/HttpClientEngineFactory<#A>, kotlin.coroutines/CoroutineContext = ..., kotlin/Function1<#A, kotlin/Unit> = ..., kotlin/Function1<io.ktor.client.plugins.websocket/WebSockets.Config, kotlin/Unit> = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.rsocket.kotlin.transport/ClientTransport // io.rsocket.kotlin.transport.ktor.websocket.client/WebSocketClientTransport|WebSocketClientTransport(io.ktor.client.engine.HttpClientEngineFactory<0:0>;kotlin.coroutines.CoroutineContext;kotlin.Function1<0:0,kotlin.Unit>;kotlin.Function1<io.ktor.client.plugins.websocket.WebSockets.Config,kotlin.Unit>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){0ยง<io.ktor.client.engine.HttpClientEngineConfig>}[0]
final fun <#A: io.ktor.client.engine/HttpClientEngineConfig> io.rsocket.kotlin.transport.ktor.websocket.client/WebSocketClientTransport(io.ktor.client.engine/HttpClientEngineFactory<#A>, kotlin/String, kotlin/Boolean = ..., kotlin.coroutines/CoroutineContext = ..., kotlin/Function1<io.ktor.client.engine/HttpClientEngineConfig, kotlin/Unit> = ..., kotlin/Function1<io.ktor.client.plugins.websocket/WebSockets.Config, kotlin/Unit> = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.rsocket.kotlin.transport/ClientTransport // io.rsocket.kotlin.transport.ktor.websocket.client/WebSocketClientTransport|WebSocketClientTransport(io.ktor.client.engine.HttpClientEngineFactory<0:0>;kotlin.String;kotlin.Boolean;kotlin.coroutines.CoroutineContext;kotlin.Function1<io.ktor.client.engine.HttpClientEngineConfig,kotlin.Unit>;kotlin.Function1<io.ktor.client.plugins.websocket.WebSockets.Config,kotlin.Unit>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){0ยง<io.ktor.client.engine.HttpClientEngineConfig>}[0]
final fun <#A: io.ktor.client.engine/HttpClientEngineConfig> io.rsocket.kotlin.transport.ktor.websocket.client/WebSocketClientTransport(io.ktor.client.engine/HttpClientEngineFactory<#A>, kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin.coroutines/CoroutineContext = ..., kotlin/Function1<io.ktor.client.engine/HttpClientEngineConfig, kotlin/Unit> = ..., kotlin/Function1<io.ktor.client.plugins.websocket/WebSockets.Config, kotlin/Unit> = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.rsocket.kotlin.transport/ClientTransport // io.rsocket.kotlin.transport.ktor.websocket.client/WebSocketClientTransport|WebSocketClientTransport(io.ktor.client.engine.HttpClientEngineFactory<0:0>;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Boolean;kotlin.coroutines.CoroutineContext;kotlin.Function1<io.ktor.client.engine.HttpClientEngineConfig,kotlin.Unit>;kotlin.Function1<io.ktor.client.plugins.websocket.WebSockets.Config,kotlin.Unit>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){0ยง<io.ktor.client.engine.HttpClientEngineConfig>}[0]
