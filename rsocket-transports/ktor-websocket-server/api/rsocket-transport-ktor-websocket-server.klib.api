// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.rsocket.kotlin:rsocket-transport-ktor-websocket-server>
sealed interface io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance : io.rsocket.kotlin.transport/RSocketServerInstance { // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance|null[0]
    abstract val connectors // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance.connectors|{}connectors[0]
        abstract fun <get-connectors>(): kotlin.collections/List<io.ktor.server.engine/EngineConnectorConfig> // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance.connectors.<get-connectors>|<get-connectors>(){}[0]
    abstract val path // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance.path|{}path[0]
        abstract fun <get-path>(): kotlin/String // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance.path.<get-path>|<get-path>(){}[0]
    abstract val protocol // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance.protocol|{}protocol[0]
        abstract fun <get-protocol>(): kotlin/String? // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance.protocol.<get-protocol>|<get-protocol>(){}[0]
}

sealed interface io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport : io.rsocket.kotlin.transport/RSocketTransport { // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport|null[0]
    abstract fun target(io.ktor.server.engine/EngineConnectorConfig, kotlin/String = ..., kotlin/String? = ...): io.rsocket.kotlin.transport/RSocketServerTarget<io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance> // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport.target|target(io.ktor.server.engine.EngineConnectorConfig;kotlin.String;kotlin.String?){}[0]
    abstract fun target(kotlin.collections/List<io.ktor.server.engine/EngineConnectorConfig>, kotlin/String = ..., kotlin/String? = ...): io.rsocket.kotlin.transport/RSocketServerTarget<io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance> // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport.target|target(kotlin.collections.List<io.ktor.server.engine.EngineConnectorConfig>;kotlin.String;kotlin.String?){}[0]
    abstract fun target(kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String? = ...): io.rsocket.kotlin.transport/RSocketServerTarget<io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance> // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport.target|target(kotlin.String;kotlin.Int;kotlin.String;kotlin.String?){}[0]
    abstract fun target(kotlin/String = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.server.engine/EngineConnectorBuilder, kotlin/Unit>): io.rsocket.kotlin.transport/RSocketServerTarget<io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerInstance> // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport.target|target(kotlin.String;kotlin.String?;kotlin.Function1<io.ktor.server.engine.EngineConnectorBuilder,kotlin.Unit>){}[0]

    final object Factory : io.rsocket.kotlin.transport/RSocketTransportFactory<io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport, io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransportBuilder> // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport.Factory|null[0]
}

sealed interface io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransportBuilder : io.rsocket.kotlin.transport/RSocketTransportBuilder<io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransport> { // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransportBuilder|null[0]
    abstract fun <#A1: io.ktor.server.engine/ApplicationEngine, #B1: io.ktor.server.engine/ApplicationEngine.Configuration> httpEngine(io.ktor.server.engine/ApplicationEngineFactory<#A1, #B1>, kotlin/Function1<#B1, kotlin/Unit> = ...) // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransportBuilder.httpEngine|httpEngine(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;kotlin.Function1<0:1,kotlin.Unit>){0§<io.ktor.server.engine.ApplicationEngine>;1§<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
    abstract fun webSocketsConfig(kotlin/Function1<io.ktor.server.websocket/WebSockets.WebSocketOptions, kotlin/Unit>) // io.rsocket.kotlin.transport.ktor.websocket.server/KtorWebSocketServerTransportBuilder.webSocketsConfig|webSocketsConfig(kotlin.Function1<io.ktor.server.websocket.WebSockets.WebSocketOptions,kotlin.Unit>){}[0]
}

final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.rsocket.kotlin.transport.ktor.websocket.server/WebSocketServerTransport(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, kotlin/Array<out io.ktor.server.engine/EngineConnectorConfig>..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Function1<#B, kotlin/Unit> = ..., kotlin/Function1<io.ktor.server.websocket/WebSockets.WebSocketOptions, kotlin/Unit> = ...): io.rsocket.kotlin.transport/ServerTransport<io.ktor.server.engine/EmbeddedServer<#A, #B>> // io.rsocket.kotlin.transport.ktor.websocket.server/WebSocketServerTransport|WebSocketServerTransport(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;kotlin.Array<out|io.ktor.server.engine.EngineConnectorConfig>...;kotlin.String?;kotlin.String?;kotlin.Function1<0:1,kotlin.Unit>;kotlin.Function1<io.ktor.server.websocket.WebSockets.WebSocketOptions,kotlin.Unit>){0§<io.ktor.server.engine.ApplicationEngine>;1§<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.rsocket.kotlin.transport.ktor.websocket.server/WebSocketServerTransport(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, kotlin/Int = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Function1<#B, kotlin/Unit> = ..., kotlin/Function1<io.ktor.server.websocket/WebSockets.WebSocketOptions, kotlin/Unit> = ...): io.rsocket.kotlin.transport/ServerTransport<io.ktor.server.engine/EmbeddedServer<#A, #B>> // io.rsocket.kotlin.transport.ktor.websocket.server/WebSocketServerTransport|WebSocketServerTransport(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;kotlin.Int;kotlin.String;kotlin.String?;kotlin.String?;kotlin.Function1<0:1,kotlin.Unit>;kotlin.Function1<io.ktor.server.websocket.WebSockets.WebSocketOptions,kotlin.Unit>){0§<io.ktor.server.engine.ApplicationEngine>;1§<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
